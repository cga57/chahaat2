{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","getPrice","input","document","getElementById","value","console","log","price_sum","props","counters","this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","type","classes","count","Component","Counters","onReset","onAdd","onCalculate","map","key","App","state","handleIncrement","index","indexOf","setState","handleDelete","counterId","filter","c","handleReset","handleCalculation","alert","addCounter","length","push","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ac467e74.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// no this statement\r\n// React passes the props during runtime\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Shopping Cart\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n        <button className=\"btn btn-secondary btn-sm\">\r\n          CHAHAAT RESTAURANTS{\" \"}\r\n        </button>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    // no children\r\n    // console.log(this.props);\r\n    console.log(\"Counter - rendered\");\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          {\" \"}\r\n          Increment{\" \"}\r\n        </button>\r\n        <buttton\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n        >\r\n          {\" \"}\r\n          Delete{\" \"}\r\n        </buttton>\r\n        <form>\r\n          <label>\r\n            {\"Item Name: \"}\r\n            <input type=\"text\" />\r\n          </label>{\" \"}\r\n          <label>\r\n            {\"Item Price: \"}\r\n            <input type=\"numeric\" id=\"userInput\" />\r\n            <input type=\"submit\" onClick={this.getPrice} />\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n  getPrice = () => {\r\n    var input = document.getElementById(\"userInput\").value;\r\n    console.log(input);\r\n    console.log(\"I am running\");\r\n    let price_sum = this.props.price_sum;\r\n    price_sum += price_sum + input * this.props.counters.value;\r\n\r\n    // this.setState({ price_sum: price_sum });\r\n  };\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  render() {\r\n    const {\r\n      onReset,\r\n      onDelete,\r\n      counters,\r\n      onIncrement,\r\n      onAdd,\r\n      onCalculate,\r\n    } = this.props;\r\n    // console.log(\"Counteres - rendered\");\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          {\" \"}\r\n          Reset{\" \"}\r\n        </button>\r\n        <button onClick={onAdd} className=\"btn btn-primary btn-sm m-2\">\r\n          {\" \"}\r\n          AddCounter{\" \"}\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onAdd={onAdd}\r\n            onIncrement={onIncrement}\r\n            onCalculate={onCalculate}\r\n            counter={counter}\r\n          >\r\n            <h4> Counter #{counter.id} </h4>\r\n          </Counter>\r\n        ))}\r\n        <button onClick={onCalculate} className=\"btn btn-primary btn-sm m-2\">\r\n          {\" \"}\r\n          CalculatePrice{\" \"}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\nimport \"react-app-polyfill/stable\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n    price_sum: 0,\n  };\n  constructor() {\n    super();\n    //console.log(\"App - Constructor\");\n  }\n  componentDidMount() {\n    //console.log(\"App - Mounted\");\n  }\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters]; // ... clones the array\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    console.log(this.state.counters[index]);\n    this.setState({ counters });\n  };\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters: counters }); // set old counters array to this counters constant\n  };\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters: counters });\n  };\n  handleCalculation = () => {\n    if (this.state.price_sum > 0) {\n      alert(this.state.price_sum);\n    }\n  };\n  addCounter = () => {\n    const length = this.state.counters.length;\n    this.state.counters.push({\n      id: length + 1,\n      value: 0,\n    });\n    const counters = this.state.counters;\n    // JSON.stringify(counters);\n    this.setState({ counters: counters });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value >= 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onAdd={this.addCounter}\n            onCalculate={this.handleCalculation}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}